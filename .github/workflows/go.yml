# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.18

    - name: Install dependencies
      run: go mod download

    - name: Build linux arm64
      run: export GOOS=linux; export ARCH=arm64; go build -ldflags "-X github.com/cnative-dev/cli/cmd.version=${{ github.ref_name }}" -o cnative/$GOOS-$ARCH
      
    - name: Build linux amd64
      run: export GOOS=linux; export ARCH=amd64; go build -ldflags "-X github.com/cnative-dev/cli/cmd.version=${{ github.ref_name }}" -o cnative/$GOOS-$ARCH

    - name: Build mac arm64
      run: export GOOS=darwin; export ARCH=arm64; go build -ldflags "-X github.com/cnative-dev/cli/cmd.version=${{ github.ref_name }}" -o cnative/$GOOS-$ARCH
      
    - name: Build mac amd64
      run: export GOOS=darwin; export ARCH=amd64; go build -ldflags "-X github.com/cnative-dev/cli/cmd.version=${{ github.ref_name }}" -o cnative/$GOOS-$ARCH

    - name: Build windows
      run: export GOOS=windows; export ARCH=amd64; go build -ldflags "-X github.com/cnative-dev/cli/cmd.version=${{ github.ref_name }}" -o cnative/$GOOS-$ARCH

    - uses: actions/upload-artifact@master
      with:
        name: artifact
        path: cnative
  
  build_go_selfupdate:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        repository: sanbornm/go-selfupdate
    
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.18

    - name: Install dependencies
      run: go mod download

    - name: Build go_selfupdate
      run: go build -o go-selfupdate cmd/go-selfupdate/main.go

    - uses: actions/upload-artifact@master
      with:
        name: patcher
        path: ./go-selfupdate

  generate_selfupdate:
    runs-on: ubuntu-latest
    needs: ["build", "build_go_selfupdate"]
    steps:
    - uses: yizhoumo/setup-ossutil@v1.1.3
      with:
        endpoint: 'oss-cn-beijing.aliyuncs.com'
        access-key-id: ${{ secrets.ALIYUN_ACCESS_KEY_ID }}
        access-key-secret: ${{ secrets.ALIYUN_ACCESS_KEY_SECRET }}
        ossutil-version: '1.7.14'

    - run: ossutil cp -r oss://cnative-client-release ./oss

    - name: Delete old latest folder
      run: rm -rf oss/cnative/latest

    - uses: actions/download-artifact@master
      with:
        name: artifact
        path: new/cnative

    - uses: actions/download-artifact@master
      with:
        name: patcher
        path: .

    - name: Set exec permission
      run: chmod a+x ./go-selfupdate && chmod a+x new/cnative/*

    - name: Create patches
      run: ./go-selfupdate -o oss/cnative new/cnative/ ${{ github.ref_name }}

    - name: Create latest file
      run: |
        mkdir -p oss/cnative/latest && \
        cp new/cnative/* oss/cnative/latest/ && \
        cd oss/cnative/latest && \
        for f in *; do mv -- "$f" "cnative-$f"; done && \
        cd ../../../

    - name: Remove old file
      run: |
        find oss/cnative -name "*.gz" -not -path "oss/cnative/${{ github.ref_name }}" -exec rm -f {} \;

    - name: Add extension for windows
      run: for f in oss/cnative/latest/*-windows-*; do mv -- "$f" "$f.exe"; done

    - name: Generate checksum
      run: cd oss/cnative/latest && sha512sum * > ./sha512.txt && cd ../../../

    - name: Show files
      run: find .

    - name: Remove old artifact in oss
      run: ossutil rm -r oss://cnative-client-release/cnative

    - name: Upload artifact
      run: ossutil cp -r -u ./oss oss://cnative-client-release 
